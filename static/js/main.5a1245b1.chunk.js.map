{"version":3,"sources":["logo.svg","components/bio.js","components/repo.js","components/list_repos.js","components/projects.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Bio","props","state","bio_data","this","setState","loading","fetch","then","response","json","data","className","src","avatar_url","name","login","bio","followers","following","company","location","React","Component","Repo","repo","description","updated_at","ListRepos","repos","display_repos","language","language_options","search","type","type_options","languages","types","method","forEach","item","i","lang","includes","push","e","target","value","applyFilters","console","log","Object","keys","toLowerCase","id","onChange","onSearchChange","placeholder","onLanguageChange","map","current_tab","flagCheck","Main","res","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5a1245b1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport '../styles/main.css'\r\nimport '../styles/bio.css'\r\n\r\nclass Bio extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            bio_data: {}\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        fetch(\"https://api.github.com/users/supreetsingh247\", {\r\n            \"method\": 'GET'\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            this.setState({\r\n                bio_data: data,\r\n                loading: false\r\n            })\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"bio_holder\">\r\n            {\r\n                this.state.loading\r\n                ?\r\n                \"LOADING\"\r\n                :\r\n                <div>\r\n                    <img src={this.state.bio_data.avatar_url} className=\"bio_avatar\"/>\r\n                    <h2 className=\"bio_detail bio_name\">{this.state.bio_data.name}</h2>\r\n                    <p className=\"bio_detail bio_login\">{this.state.bio_data.login}</p>\r\n                    <p className=\"bio_detail bio_bio\">{this.state.bio_data.bio}</p>\r\n                    <button>Follow</button>\r\n                    <br/>\r\n                    <p className=\"bio_detail bio_followers\">{this.state.bio_data.followers + \" Followers \" + this.state.bio_data.following + \" Following \" + this.state.bio_data.followers + \"Star\"}</p>\r\n                    <p className=\"bio_detail bio_company\">{this.state.bio_data.company}</p>\r\n                    <p className=\"bio_detail bio_location\">{this.state.bio_data.location}</p>\r\n                    <p className=\"bio_detail bio_email\">{\"supreetsingh.247@gmail.com\"}</p>\r\n                </div>\r\n            }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Bio\r\n","import React from 'react';\r\nimport '../styles/repo.css'\r\n\r\nclass Repo extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {bio_data: {}}\r\n    }\r\n\r\n    componentDidMount(){\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <li className=\"repo_card\">\r\n                <h3>{this.props.repo.name}</h3>\r\n                <p>{this.props.repo.description}</p>\r\n                <p>{this.props.repo.updated_at}</p>\r\n            </li>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Repo\r\n","import React from 'react';\r\nimport Repo from './repo.js';\r\n\r\nclass ListRepos extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        let repos = []\r\n        this.state = {\r\n            repos: repos,\r\n            display_repos: repos,\r\n            language: 'all',\r\n            language_options: [],\r\n            search: '',\r\n            type: 'all',\r\n            type_options: []\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        var languages = []\r\n        var types = []\r\n        fetch(\"https://api.github.com/users/supreetsingh247/repos\",    {\r\n                method:'GET',\r\n            }\r\n        )\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            data.forEach((item, i) => {\r\n                let lang = item.language\r\n                if(!languages.includes(lang) && lang !== null)\r\n                    languages.push(lang)\r\n                let type = item.type\r\n                if(!types.includes(type) && type !== null)\r\n                    types.push(type)\r\n            });\r\n            this.setState({\r\n                repos: data,\r\n                display_repos: data,\r\n                language_options: languages,\r\n                type_options: types,\r\n                loading: false\r\n            })\r\n        })\r\n    }\r\n\r\n    onSearchChange(e){\r\n        var state = {...this.state}\r\n        state.search = e.target.value\r\n        this.setState(state)\r\n        this.applyFilters(state)\r\n    }\r\n\r\n    onLanguageChange(e){\r\n        var state = {...this.state}\r\n        state.language = e.target.value\r\n        this.setState(state)\r\n        this.applyFilters(state)\r\n    }\r\n\r\n    applyFilters(state){\r\n        var repos = [...state.repos]\r\n        var display_repos = []\r\n        var search = state.search\r\n        console.log(state)\r\n        Object.keys(repos).forEach((item, i) => {\r\n            console.log(repos[item].name)\r\n            if((!search || repos[item].name.toLowerCase().includes(search.toLowerCase())) &&\r\n                (state.language === 'all' || (repos[item].language && repos[item].language.toLowerCase() === state.language)) &&\r\n                (state.type === 'all' || (repos[item].type && repos[item].type.toLowerCase() === state.type))){\r\n                display_repos.push(repos[item])\r\n            }\r\n        });\r\n        this.setState({display_repos: display_repos})\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <div className=\"search_holder\">\r\n                    <input type=\"text\" id=\"search\" className=\"search\" onChange={(e) => this.onSearchChange(e)} placeholder=\"Find a repository...\"/>\r\n                    <select name=\"type\" id=\"select_type\"onChange={(e) => this.onLanguageChange(e)}>\r\n                      <option value=\"all\">All</option>\r\n                      {\r\n                          this.state.language_options.map((lang) => (\r\n                            <option value={lang.toLowerCase()}>{lang}</option>\r\n                        ))\r\n                      }\r\n                    </select>\r\n                    <select name=\"language\" id=\"select_language\">\r\n                        <option value=\"all\">All</option>\r\n                    </select>\r\n                </div>\r\n                {\r\n                    this.state.loading\r\n                    ?\r\n                    \"LOADING\"\r\n                    :\r\n                    this.state.display_repos.map((repo) => (\r\n                        <Repo repo = {repo}/>\r\n                    ))\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListRepos\r\n","import React from 'react';\r\nimport ListRepos from './list_repos.js';\r\nimport '../styles/projects.css'\r\n\r\nclass Bio extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {current_tab: \"repositories\"}\r\n    }\r\n\r\n    componentDidMount(){\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"projects_holder\">\r\n                <div className=\"projects_nav\">\r\n                    <div flagCheck={this.state.current_tab === 'overview' ? 1 : 0}>Overview</div>\r\n                    <div flagCheck={this.state.current_tab === 'repositories' ? 1 : 0}>Repositories</div>\r\n                    <div flagCheck={this.state.current_tab === 'projects' ? 1 : 0}>Projects</div>\r\n                </div>\r\n                <div>\r\n                    <ListRepos/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Bio\r\n","import React from 'react';\r\nimport Bio from './bio.js';\r\nimport Projects from './projects.js';\r\nimport '../styles/main.css'\r\n\r\nclass Main extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {bio_data: {}}\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch(\"https://api.github.com/users/supreetsingh247\")\r\n        .then((res) => {\r\n            res = res.json()\r\n            this.setState({\r\n                bio_data: res\r\n            })\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"main_holder\">\r\n                <Bio/>\r\n                <Projects/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Main from './components/main.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}